@model  SwarajCustomer_Common.Entities.UserDataModel
@using SwarajCustomer_Common
@{
    Layout = "~/Areas/Account/Views/Shared/_Layout.cshtml";
    var Server_Url = CommonMethods.BaseUrl;
}

<body style="background-color: #666666;">
    <div class="limiter">
        <div class="container-login100">
            <div class="wrap-login100">
                @using (Html.BeginForm("ResetPassword", "User", FormMethod.Post, new { enctype = "multipart/form-data", @class = "login100-form validate-form" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(a => a.ReferalCode)
                    @Html.HiddenFor(a => a.expired)
                    @Html.HiddenFor(a => a.keys)

                    
                    <span class="login100-form-title p-b-43"> Reset Password </span>

                    <div class="wrap-input100 validate-input password" data-validate="Password is required">
                        <input class="input100" type="password" value="@Model.Password" name="Password" id="user_password" data-toggle="password">
                        <div class="input-group-append eyeicon">
                            <span class="input-group-text"><i class="fa fa-eye"></i></span>
                        </div>
                        <span class="focus-input100"></span>
                        <span class="label-input100">Password</span>

                        @Html.ValidationMessageFor(m => m.Password, "", new { Style = "color:red;" })
                        @Html.ValidationMessage("error", new { Style = "color:red;", @id = "failedErrorId" })
                    </div>

                    <div class="wrap-input100 validate-input password" data-validate="Confirm Password is required">
                        <input class="input100" type="password" value="@Model.ConfirmPassword" data-val-equalto="Password and Confirmation Password must match." data-val-equalto-other="*.Password" data-val-required="Required." id="ConfirmPassword" name="ConfirmPassword" data-toggle="password">
                        <div class="input-group-append eyeicon">
                            <span class="input-group-text"><i class="fa fa-eye"></i></span>
                        </div>
                        <span class="focus-input100"></span>
                        <span class="label-input100">Confirm Password</span>

                        @Html.ValidationMessageFor(m => m.ConfirmPassword, "", new { Style = "color:red;" })
                        @Html.ValidationMessage("error", new { Style = "color:red;", @id = "failedErrorId" })


                    </div>
                    <a href="/Account/User/Login" class="form-btn">Login again </a>
                    <div class="container-login100-form-btn">
                        <input type="submit" value="submit" class="login100-form-btn" id="btnSubmit" name="Login" />
                    </div>
                }
                <!-- SwarajCustomer_WebAPI only for Production and QA-->
                @{
                    if (CommonMethods.BaseUrl.Contains("localhost"))
                    {
                                <div class="login100-more" style="background-image: url('/../../Content/images/bgnew.png');">
                                    <span class="logoimage loginpage">
                                        <img src="~/Content/images/newlogo.png" />
                                    </span>
                                </div>
                    }
                    else
                    {
            <div class="login100-more" style="background-image: url('/AgriGuru/Content/images/bgnew.png');">
                <span class="logoimage loginpage">
                    <img src="~/Content/images/newlogo.png" />
                </span>
            </div>
                    }
                }

            </div>
        </div>
    </div>





</body>
<style>
    span.field-validation-error {
        position: absolute;
        left: 0;
        bottom: -20px;
        font-size: 13px;
    }
</style>
<script src="~/Scripts/function.js"></script>
<script type="text/javascript">
    AlphaNumericOnly('.alphaNumericOnly');
    !function ($) {
        //eyeOpenClass: 'fa-eye',
        //eyeCloseClass: 'fa-eye-slash',
        'use strict';
        $(function () {
            $('[data-toggle="password"]').each(function () {
                var input = $(this);
                var eye_btn = $(this).parent().find('.input-group-text');
                eye_btn.css('cursor', 'pointer').addClass('input-password-hide');
                eye_btn.on('click', function () {
                    if (eye_btn.hasClass('input-password-hide')) {
                        eye_btn.removeClass('input-password-hide').addClass('input-password-show');
                        eye_btn.find('.fa').removeClass('fa-eye').addClass('fa-eye-slash')
                        input.attr('type', 'text');
                    } else {
                        eye_btn.removeClass('input-password-show').addClass('input-password-hide');
                        eye_btn.find('.fa').removeClass('fa-eye-slash').addClass('fa-eye')
                        input.attr('type', 'password');
                    }
                });
            });
        });

    }(window.jQuery);


    $(document).ready(function () {
        var IsVaild = '@Model.IsVaild';
        var Message = '@Model.Message';
        debugger;
        if (IsVaild === 'N' && Message !== '') {
            displayMessage(Message, 'warning');
            alert(Message);
            $("#btnSubmit").attr('disabled', true);
        } else {
            $("#btnSubmit").attr('disabled', false);
        }
    });

</script>




